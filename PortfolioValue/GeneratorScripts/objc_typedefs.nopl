
console("generating objc typedefs");

String schemaNickname = schema.targetNamespace;
schemaNickname = substring(schemaNickname, lastIndexOf(schemaNickname, "/")+1);

//generate the header file for the typedefs
outputToFile(valueForKey('__ROOT_DIR__')+"/"+schemaNickname+"_typedefs.h");

<?//
//  ?>#schemaNickname;<?_typedefs.h
//  ?>#schemaNickname;<?
//
//  Created by NoPLGenerator on ?>#format("%/%/%", (Number)month(), (Number)dayOfTheMonth(), (String)substring((String)year(), 2));<?.
//  Copyright (c) ?>#year();<?. All rights reserved.
//

#ifndef __?>#toUpper(schemaNickname);<?_TYPEDEFS_H__
#define __?>#toUpper(schemaNickname);<?_TYPEDEFS_H__

#import <UIKit/UIKit.h>

//handle conversions from strings
UIColor* string_to_UIColor(const char* colorString);
bool string_to_bool(const char* boolString);
CGPoint string_to_CGPoint(const char* pointString);
CGRect string_to_CGRect(const char* rectString);

NSString* escapeForXML(NSString* string);

#endif //end __?>#toUpper(schemaNickname);<?_TYPEDEFS_H__

?>

//generate the header file for the typedefs
outputToFile(valueForKey('__ROOT_DIR__')+"/"+schemaNickname+"_typedefs.m");

<?
#include <string.h>
#include <stdio.h>
#include "?>#schemaNickname;<?_typedefs.h"

unsigned char hexToDec(char hexChar)
{
	switch(hexChar)
	{
		case '0': return 0;
		case '1': return 1;
		case '2': return 2;
		case '3': return 3;
		case '4': return 4;
		case '5': return 5;
		case '6': return 6;
		case '7': return 7;
		case '8': return 8;
		case '9': return 9;
		case 'a':
		case 'A':
			return 10;
		case 'b':
		case 'B':
			return 11;
		case 'c':
		case 'C':
			return 12;
		case 'd':
		case 'D':
			return 13;
		case 'e':
		case 'E':
			return 14;
		case 'f':
		case 'F':
			return 15;
		default:
			return 0;
	}
}

UIColor* string_to_UIColor(const char* colorString)
{
	if(colorString[0] == '#')
		colorString++;

	float r = (hexToDec(colorString[0]) << 4) + hexToDec(colorString[1]);
	float g = (hexToDec(colorString[2]) << 4) + hexToDec(colorString[3]);
	float b = (hexToDec(colorString[4]) << 4) + hexToDec(colorString[5]);
	float a = (hexToDec(colorString[6]) << 4) + hexToDec(colorString[7]);
	return [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a/255.0f];
}

bool string_to_bool(const char* boolString)
{
	return !strcmp(boolString, "true");
}

CGPoint string_to_CGPoint(const char* pointString)
{
	CGPoint point;
	point.x = atof(pointString);
	point.y = atof(strchr(pointString, ',')+1);
	return point;
}

CGRect string_to_CGRect(const char* rectString)
{
	CGRect rect;
	rect.origin.x = atof(rectString);
	rectString = strchr(rectString, ',')+1;
	rect.origin.y = atof(rectString);
	rectString = strchr(rectString, ',')+1;
	rect.size.width = atof(rectString);
	rectString = strchr(rectString, ',')+1;
	rect.size.height = atof(rectString);
	return rect;
}

NSString* escapeForXML(NSString* string)
{
	NSMutableString* mutableStr = [NSMutableString stringWithString:string];
	
	//replace all problematic characters
	[mutableStr replaceOccurrencesOfString:@"&" withString:@"&amp;" options:NSLiteralSearch range:NSMakeRange(0, [mutableStr length])];
	[mutableStr replaceOccurrencesOfString:@"\"" withString:@"&quot;" options:NSLiteralSearch range:NSMakeRange(0, [mutableStr length])];
	[mutableStr replaceOccurrencesOfString:@"'" withString:@"&#x27;" options:NSLiteralSearch range:NSMakeRange(0, [mutableStr length])];
	[mutableStr replaceOccurrencesOfString:@">" withString:@"&gt;" options:NSLiteralSearch range:NSMakeRange(0, [mutableStr length])];
	[mutableStr replaceOccurrencesOfString:@"<" withString:@"&lt;" options:NSLiteralSearch range:NSMakeRange(0, [mutableStr length])];
	return mutableStr;
}

?>
